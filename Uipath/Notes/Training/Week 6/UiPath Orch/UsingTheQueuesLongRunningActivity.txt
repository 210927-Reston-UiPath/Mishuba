Add Queue Item and Get Reference
 - UiPath.Persistence.Activities.Queue.AddQueueItemAndGetReference
    * Adds an Orchestrator Queue Itrm with parameters and retrieves the corresponding Queue Item Object stored ina 'QueueItemData' in order to wait for transaction completion at any time during rhe execution of the workflow.
 - properties   
    * Common
        # ContinueOnError
            $ specifies if the automation should continue even when the activity throws an error. This field only supports Boolean values (True, False). The default value is False.  As a result, if the field is blank and an error is thrown the execution of the project stops.  If the value is set to True, the execution of the project continues regadless of any error.
        # DisplayName
            $ The display name of the activity
        # TimeoutMS 
            $ Specifies the amount of time (in milliseconds) to wait ffor the activity to run before an error is thrown.  The default value is 30000 milliseconds (30 seconds).

    * input 
        # Deadline 
            $ The timestamp before whcihc the queue item should be processed 
                % this property can be filled in with relative timestamps such as DateTime.Now.AddHours(2), DateTime.Now.AddDays(10) and DateTime.Now.Add(New System.TimeSpan(5, 0, 0, 0)). Additionally, you can use the US notation to add an exact time such as 12/10/2017 07:40:00. Automatically correcting this date is available. For example, if you write 8 9 2018 9:0, it is automatically transformed to 08/09/2018 09:00:00.
        # FolderPath
            $ The path to an Orchestrator Folder different to the one the current process operates in where you want to create the queue item. For 'Classic' folders, this property can only be used with Floating Robots and only if the current user has the correct task privilege in the target folder.  For 'Modern' folders, folder path overriding is not supported.  This field supports only strings and String variables.
        # ItemInformationf
            $ A collection of additional information about the specific QueueItem that is to be added.  The inormation is stored in the item and is used during a transcation processing. It is recommended to use only primitive values of the following types: Number, Boolean, String and DateTime. The value of string arguments cannot contain the following characters [ and " ". Argument names cannot contain the following characters: : . , @ "
        # ItemInformationCollection
            $ Enables importing an entire dictionary of information for a queue Item. This field only accepts Dictionary<string object> variables.
        # Postpone
            $ The timestamp after which the queue item may be processed. This property is a criterion for the prioritization of queue items, alongside 'Priority' and 'Due Date'. This property can be filled in with relative timestamps such as DateTime.Now.Add(New System.TimeSpan(5, 0, 0, 0,)). Additionlly, you can use the US notation to add an exact time, such as 12/10/2017 7:40:00. Automatically correcting this date is available for example, if you write 8 9 2019 9:0, it is automatically transformed to 00/09/2019 09:00:00
        # Priority
            $ The priority level of the queue item to be added.  This property is a criterion for the prioritization of queue items, alongside Due Date and Defer Date
        # Queue name
            $ The queue where the QueueItem object is to be added.  The name is case insensitive, meaning that if in Orchestrator it was defined as "MyFirstQueue", it matches "myfirstqueue". The maximum number of characters is 50.
        # Reference
            $ The reference of the added QueueItem. The reference can be used to link your transcations to other pplications used within an automation project.  Additionally, this feature enbales you to search for certain transcations in Orchestrator, according to the provided string.
    * Misc 
        # Private - if selected, the values of variables and arguments are no longer logged at Verbose level.
    * output
        # Queue Item (Output) - The queue object that is returned rom Orchestrator as a 'QueueItemDate' object after the queue is created. This object can be passed to the 'Wait for Queue Item and Resume' Activity in order to suspend the execution of the workflow until the transcation is completed.
 - In the Body of the ctivity
    *Some properties can be configured straight from the body of the activity itself, for easier handling such as:
        $ Queue name
        $ Priority
        $ Item information
        $ Queue Item Object (Output)

WAIT FOR QUEUE ITEM AND Resume
- UiPath.Persistence.Activities.Queue.WaitForQueueItemAndResume
    @ Can be used to suspend the execution of the current workflow until a specified transcation reaches a completion state (successful, Failed, Abandoned, Deleted). T0 designate a transcation, a QueueItemData object obtained from the Add Queue Item and get Reference activity must be supplied. Upon completion of the transcation, the execution of the workflow is resumed.

 - properties
    * Common
        $ ContinueOnError 
            #Specifies if the automation should continue even when the activity throws an error. This field only supports Boolean values (true, False). he default value is False. As a result, if the ield is blank and an error is thrown, the execution of the project stops. If the value is set to True, the excution of the project continues regardless of any error.
        $ DisplayName
            # The display name of the activity.
        $ StatusMessage
            # The message specified in this property field is displayed in orchestrator alongside the workflow that is suspended by this activity. This field supports only strings and String variables.
        $ TimeoutMs - Specifies the amount of time (in milliseconds) to wait for the activity to run beore an error is trhown.  The default value is 30000 milliseconds (30 seconds).
    * input 
        $ Queue Item Object (Input) 
            # The transcation you want to suspend, stored in a 'QueueItemData' varilable.  This variable can be obtained rom a "Add Queue Item" and "Get Reference" activity. This field supports only "QueueItemData" variables.
    * Misc  
        $ Private
            # IF selelcted the values of variables and arguments are no longer logged at Verbose level.
    * Output
        $ Queue Item Object (Output) 
            # The updated Queue object obtained from Orchestrator after the execution of this activity.

 -In The Body Of The Activity
    * SOme properties can be configured straight from the body of the activity itself, or easier handling such as:
        $ Queue Item Object (Input)
        $ Queue Item Object (Output)
        